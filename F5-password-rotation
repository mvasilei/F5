#! /usr/bin/env python
import requests, signal, re, sys, json
from requests.packages.urllib3.exceptions import InsecureRequestWarning

''' You must run this script from the rancid server and have read access to router.db file
    feed the variables old_password and new_password with the corresponding apiRawValues
'''

def signal_handler(sig, frame):
  print('Exiting gracefully Ctrl-C detected...')
  sys.exit(0)

def get_group_name(host, password):
  gn = ''
  url = 'https://' + host + '/mgmt/tm/cm/device-group/'

  try:
    response = requests.get(url, verify=False, auth=('admin', password))
  except requests.ConnectionError, e:
    print 'Could not connect on' + host + 'to retrieve device group name'
    return False

  if response.status_code != requests.codes.ok :
    print host + ' ** Request returned an error:' + str(response.status_code) + ' Could not retrieve device group name'
    return False

  gn = response.json()['items'][0]['name']
  return gn

def check_sync_status(host, password):
  url = 'https://' + host + '/mgmt/tm/cm/sync-status'

  print 'Checking SYNC status on: ' + host

  try:
    response = requests.get(url, verify=False, auth=('admin', password))
  except requests.ConnectionError, e:
    print 'Could not connect on' + host
    return False, False

  if response.status_code != requests.codes.ok :
    print host + " ** Request returned an error:" + str(response.status_code)
    return False, False

  if response.json()['entries']['https://localhost/mgmt/tm/cm/sync-status/0']['nestedStats']['entries']['status']['description'] not in ['In Sync', 'Standalone']:
    return False, False
  
  if 'Standalone' in response.json()['entries']['https://localhost/mgmt/tm/cm/sync-status/0']['nestedStats']['entries']['status']['description']:
    return True, False

  return True, True

def password_change(host, user, new_password, old_password):
  payload = {'password': new_password}
  headers = {'Content-Type': 'application/json'}

  if user == 'root':
    url = 'https://' + host + '/mgmt/shared/authn/root'
    payload = {'newPassword': new_password, 'oldPassword':old_password}
    try:
      response = requests.post(url, verify=False, auth=('admin', old_password), headers=headers, data=json.dumps(payload))
    except requests.ConnectionError, e:
      print host + str(e) + ' Could not change password for ' + user
      return False

  if user == 'admin':
    url = 'https://' + host + '/mgmt/tm/auth/user/' + user
    payload = {'password': new_password}
    try:
      response = requests.patch(url, verify=False, auth=('admin', old_password), headers=headers, data=json.dumps(payload))
    except requests.ConnectionError, e:
      print host + str(e) + ' Could not change password for ' + user
      return False

  if response.status_code != requests.codes.ok :
    print host + " ** Request returned an error:" + str(response.status_code) + " Password change failed"
    return False

  return True

def save_config(host, password):
  payload = {'command' : 'save'}
  url = 'https://' + host + '/mgmt/tm/sys/config'
  headers = {'Content-Type': 'application/json'}

  response = requests.post(url, verify=False, auth=('admin', password), headers=headers, data=json.dumps(payload))

  if response.status_code != requests.codes.ok :
    print host + " ** Request returned an error:" + str(response.status_code) + " failed to save config"
    return False

  return True

def check_failover_status(host, password, could_not_connect, failed_to_login):
  url = 'https://' + host + '/mgmt/tm/sys/failover'

  print 'Checking FAILOVER status on: ' + host

  try:
    response = requests.get(url, verify=False, auth=('admin', password))
  except requests.ConnectionError, e:
    print 'Could not connect on ' + host + 'to retrieve device group name'
    could_not_connect.append(host)
    return False, could_not_connect, failed_to_login

  if response.status_code != requests.codes.ok :
    print host + ' ** Request returned an error:' + str(response.status_code) + ' Could not retrieve failover status'
    failed_to_login.append(host)
    return False, could_not_connect, failed_to_login

  if "active" in response.json()['apiRawValues']['apiAnonymous']:
    return True, could_not_connect, failed_to_login

  return False, could_not_connect, failed_to_login

def config_sync(host, new_password, gn):
  url = 'https://' + host + '/mgmt/tm/cm/config-sync'
  response = requests.post(url, verify=False, auth=('admin', new_password), data=json.dumps({'command':'run','options':[{'to-group': gn}]}))

  if response.status_code != requests.codes.ok :
    print host + ' ** Request returned an error:' + str(response.status_code) + 'Config sync failed'
    return False

  return True

def main():
  requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

  #read rancid router.db file and for each line containing ;f5; check device's config sync status and failover status
  #if in sync and if active change the password for admin and root and perform config sync
  #print a list for each category: failed to connect, failed to login, devices found not in sync
  HA = False
  new_password = ''
  old_password = ''
  active = []
  could_not_connect = []
  failed_to_login = []
  not_in_sync = []

  try:
    with open ('hostfile') as h:#('/var/rancid/sss_automation/router.db', 'r') as h:
      entries = h.readlines()
  except IOError:
    print 'Could not read file /var/rancid/sss_automation/router.db'

  for lines in entries:
    if ';f5;' in lines:
      host = lines.split(';')[0]

      failover_status,could_not_connect,failed_to_login = check_failover_status(host, old_password, could_not_connect, failed_to_login)

      if failover_status:
        active.append(host)

  for host in active:
    sync_status,HA = check_sync_status(host, old_password)
    if not sync_status and not HA:
      print host + ' configuration is not in sync with partner device'
      not_in_sync.append(host)
      continue

    if password_change(host, 'root', new_password, old_password):
      if password_change(host , 'admin', new_password, old_password):
        if save_config(host, new_password):
          if HA:
            gn = get_group_name(host, new_password)
            if gn != False:
              if config_sync(host, new_password, gn):
                print 'Password Change and config sync completed successfully on ' + host
              else:
                print 'Config sync failed on ' + host
          else:
            print 'Password Change and config saved successfully on ' + host
        else:
          print 'Failed to save the config on ' + host
      else:
        print 'Password change failed for admin on ' + host
    else:
      print 'Password change failed for root on ' + host

  print 'Device that are not in sync ' + str(not_in_sync)
  print 'Could not connect on the following devices ' + str(could_not_connect)
  print 'Failed to login on ' + str(failed_to_login)

if __name__ == '__main__':
  signal.signal(signal.SIGINT, signal_handler)  # catch ctrl-c and call handler to terminate the script
  main()
